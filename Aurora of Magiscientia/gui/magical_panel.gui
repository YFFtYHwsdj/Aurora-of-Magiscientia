# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width_minus_20 = 520
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types magical_panel
{
	type magical_panel = default_block_window {
		name = "magical_panel"
		visible = "[GetVariableSystem.Exists('show_magical_panel')]"
		
		blockoverride "animation_state_block" {
			state = {
				name = _show
				on_start = "[GetVariableSystem.Clear('hide_current_magical')]"
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/magical"
				}
			}
		
			state = {
				name = _hide
				start_sound = {
					soundeffect = "event:/SFX/UI/SideBar/magical_stop"
				}
			}
		}

		blockoverride "header_close_button" {
			onclick = "[GetVariableSystem.Toggle('show_magical_panel')]"
		}

		blockoverride "entire_back_button" {
			back_button_large = {
				position = { 8 30 }
				onclick = "[GetVariableSystem.Toggle('show_magical_panel')]"
				visible = "[GetVariableSystem.Exists('hide_current_magical')]"
				input_action = "back"
			}

			back_button_large = {
				position = { 8 30 }
				onclick = "[InformationPanelBar.OpenPreviousPanel]"
				visible = "[Not(GetVariableSystem.Exists('hide_current_magical'))]"
				input_action = "back"
			}
		}
		
		blockoverride "window_header_name"
		{
			text = "MAGICAL_HEADER"
		}

		#TOP
		blockoverride "fixed_top" {
			flowcontainer = {
				using = default_list_position
				direction = vertical
				minimumsize = { @panel_width_plus_14 -1 }
				maximumsize = { @panel_width_plus_14 -1 }

				# textbox = {
				# 	align = nobaseline
				# 	parentanchor = vcenter
				# 	raw_text = "300"
				# 	autoresize = yes
				# 	elide = right
				# }
				container = {
					layoutpolicy_horizontal = expanding
					minimumsize = { @panel_width_plus_14 -1 }
					maximumsize = { @panel_width_plus_14 -1 }
					
					icon = {
						name = "magical_icon"
						# enabled = "[GetMetaPlayer.GetPlayedOrObservedCountry.IsValid]"
						parentanchor = center
						# using = clickthrough_blocker
						size = { 90 90 }
						texture = "gfx/interface/main_hud/magical.dds"
						# using = selected_sidepanel_animation
						# blockoverride "selected_visibility" {
						# 	visible = "[GetVariableSystem.Exists('show_magical_panel')]"
						# }
						# sidepanel_button_big = {
						# 	blockoverride "icon" {
						# 		
						# 	}
						# 	# blockoverride "button_selected" {
						# 	# 	visible = "[GetVariableSystem.Exists('show_magical_panel')]"
						# 	# }
						# 	# onclick = "[GetVariableSystem.Toggle('show_magical_panel')]"
						# }
					}
				}
				
	
				default_header = {
					# position = {}
					blockoverride "text" {
						text = "ACTIVE_MAGIC"
					}
				}

			}
			

		}

		
		
		
		blockoverride "scrollarea_content"
		{
			flowcontainer = {
				using = default_list_position
				direction = vertical
				minimumsize = { @panel_width_plus_14 -1 }
				maximumsize = { @panel_width_plus_14 -1 }
				datacontext = "[AccessPlayer]"
			
				# section_header_button = {
				# 	blockoverride "left_text" {
				# 		text = "POTENTIAL_COMPANIES"
				# 	}
# 
				# 	blockoverride "right_text" {
				# 		section_header_right_text = {
				# 			text = "[GetDataModelSize(AccessPlayer.GetPotentialCompanies)]"
				# 		}
				# 	}
				# 	blockoverride "onclick" {
				# 		onclick = "[GetVariableSystem.Toggle('unavailable_companies')]"
				# 	}
# 
				# 	blockoverride "onclick_showmore" {
				# 		visible = "[Not(GetVariableSystem.Exists('unavailable_companies'))]"
				# 	}
# 
				# 	blockoverride "onclick_showless" {
				# 		visible = "[GetVariableSystem.Exists('unavailable_companies')]"
				# 	}
				# }

				flowcontainer = {
					parentanchor = hcenter
					direction = vertical
					# visible = "[GetVariableSystem.Exists('unavailable_companies')]"

					flowcontainer = {
						parentanchor = hcenter
						visible = "[Not(IsDataModelEmpty(AccessPlayer.GetPotentialCompanies))]"
						datamodel = "[AccessPlayer.GetPotentialCompanies]"
						direction = vertical
						spacing = 5

						item = {
							potential_company_item = {}
						}
					}
				}
			}
		}
	}
}

template company_item_text {
	align = nobaseline
	autoresize = yes
	maximumsize = { 350 -1 }
	multiline = yes
}

template magical_header_texts {
	minimumsize = { @panel_width_plus_14 -1 }
	maximumsize = { @panel_width_plus_14 -1 }
	autoresize = yes
	multiline = yes
	align = hcenter|nobaseline
	parentanchor = hcenter
}

type potential_company_item = flowcontainer {
	direction = vertical
	minimumsize = { @panel_width -1 }		
	maximumsize = { @panel_width -1 }
	margin = { 10 10 }
	margin_top = 3
	spacing = 5		
		
	background = {
		using = simple_frame
	}

	tooltipwidget = {
		FancyTooltip_CompanyType = {
			datacontext = "[GetPlayer]"
		}
	}

	container = {
		minimumsize = { 536 -1 }
		parentanchor = hcenter

		flowcontainer = {
			minimumsize = { 536 -1 }
			parentanchor = vcenter
			spacing = 5
			margin_left = 10
			margin_top = 2
			margin_bottom = 2

			background = {
				using = fade_right_simple
			}

			textbox = {
				text = "[CompanyType.GetNameNoFormatting]"
				default_format = "#header"
				autoresize = yes
				multiline = no
				using = fontsize_large
				using = company_item_text
				margin_bottom = 5
			}	
		}	
	}

	flowcontainer = {
		spacing = 10

		# COMPANY LOGO
		flowcontainer = {
			direction = vertical
			parentanchor = vcenter
			icon = {
				size = { 130 130 }
				texture = "[CompanyType.GetIcon]"
			}

			button = {
				using = default_button
				size = { 130 40 }
				name = "tutorial_highlight_establish_company"
				text = "ESTABLISH_COMPANY"
				onclick = "[Execute(GetPlayer.CreateCompany(CompanyType.Self))]"
				onclick = "[GetVariableSystem.Clear('hide_current_companies')]"
				onclick = "[ScrollPanelToTop('companies_panel')]"
				enabled = "[IsValid(GetPlayer.CreateCompany(CompanyType.Self))]"
				tooltip = "CREATE_COMPANY_DESC"
			}
		}

		# COMPANY DETAILS
		flowcontainer = {
			direction = vertical
			parentanchor = vcenter
			minimumsize = { 380 -1 }
			maximumsize = { 380 -1 }
			margin = { 10 10 }
			spacing = 4

			background = {
				texture = "[CompanyType.GetBackground]"
			}
		
			background = {
				using = entry_bg_simple
			}

			flowcontainer = {
				direction = horizontal
				spacing = 5							
				datamodel = "[CompanyType.AccessBuildingTypes]"
				
				item = {
					company_building_item = {}
				}
			}	

			textbox = {				
				text = "COMPANY_TYPE_PRODUCTIVITY"
				tooltip = "COMPANY_TYPE_PRODUCTIVITY_TOOLTIP"
				using = company_item_text
				margin_top = 5
			}	

			widget = { size = { 5 5 } }

			textbox = {
				text = "COMPANY_PROSPERITY_MODIFIER_HEADER"
				using = company_item_text
			}			
			
			textbox = {
				fontsize_min = 12
				autoresize = yes
				multiline = no
				elide = right
				text = "COMPANY_TYPE_PROSPERITY_MODIFIER"
				using = company_item_text
			}	
		}		
	}		
}